# 2. Prediction Search Engine
# We are trying to implement a new prediction search engine, for the search engine to have a
# good performance it will not start predicting until the user types in the second character, the
# search engine should only return the first 3 predictions ordered in alphabetical order.
# Given a set of elements, write a method that returns a String[][] containing all the
# predictions generated by the search engine, while the user typed the query. If the user typed
# a 7 letter word(ie. cartoon), the method should return an array containing 5 arrays, each of
# these arrays contains the predictions generated by adding each character to the query, first
# query: "ca", second query: "car", third query: "cart" and so on. If no results were found on a
# particular query, then that particular result will be an empty array.
# There are no null inputs, nor strings that are of length less than 2.
# Example:
# Input
# query: cartoons
# elements: [car, cartouches, carpet, cartoonist, carrot, cared, carton,
#            captain, cartoon, carter]
# Output
# [
#     [captain, car, cared],
#     [car, cared, carpet],
#     [carter, carton, cartoon],
#     [carton, cartoon, cartoonist],
#     [cartoon, cartoonist],
#     [cartoon, cartoonist],
#     []
# ]

def exercise_2_2011(query):
    if query == '' or len(query) < 2:
        return -1
    else:
        out = [[]]
        return out


if __name__ == '__main__':
    print(exercise_2_2011(8, 9))
